#lang racket
(require racket/trace)

(define (zaehleSchwarz code guess)
  (if (empty? code)
    0
    (if (= (car code) (car guess))
      (+ 1 (zaehleSchwarz (cdr code) (cdr guess)))
      (zaehleSchwarz (cdr code) (cdr guess)))
    )
  )

(define (zaehleFarbe code farbe)
  (if (empty? code)
    0
    (if (= (car code) farbe)
      (+ 1 (zaehleFarbe (cdr code) farbe))
      (zaehleFarbe (cdr code) farbe))
    )
  )

(define (minFarbe code guess farbe)
    (min (zaehleFarbe code farbe) (zaehleFarbe guess farbe))
  )

(define (minSumme code guess)
  (define (minSumme-rec code guess i)
    (if (= 6 i)
      0
      (+ (minFarbe code guess i) (minSumme-rec code guess (+ i 1)))
      )
    )
  (minSumme-rec code guess 0)
  )

(define (bewerte code guess)
    (cons (- (minSumme code guess) (zaehleSchwarz code guess)) (zaehleSchwarz code guess))
  )

(define (alleKombinationen)
    (define (alleKombinationen-iter i j k l maximum result)
    (if (> i maximum)
      result
      (if (> j maximum)
        (alleKombinationen-iter (+ i 1) 0 k l maximum result)
        (if (> k maximum)
          (alleKombinationen-iter i (+ j 1) 0 l maximum result)
          (if (> l maximum)
            (alleKombinationen-iter i j (+ k 1) 0 maximum result)
            (alleKombinationen-iter i j k (+ l 1) maximum (append result (list (list i j k l))))
            )
          )
        )
      )
    )
    (alleKombinationen-iter 0 0 0 0 5 (list))
  )

(define (filterListe moeglichkeiten guess score)
  (define (filterListeIter moeglichkeiten guess score result)
    (if (empty? moeglichkeiten)
      result
      (if (equal? (bewerte (car moeglichkeiten) guess) score)
        (filterListeIter (cdr moeglichkeiten) guess score (append result (list (car moeglichkeiten))))
        (filterListeIter (cdr moeglichkeiten) guess score result)
        )
      )
    )
  (filterListeIter moeglichkeiten guess score '())
  )

(define (zaehleWegfallende moeglichkeiten guess score)
  (if (empty? moeglichkeiten)
    0
    (if (equal? (bewerte (car moeglichkeiten) guess) score)
      (zaehleWegfallende (cdr moeglichkeiten) guess score)
      (+ 1 (zaehleWegfallende (cdr moeglichkeiten) guess score))
      )
    )
  )

(define (minScore moeglichkeiten guess scores)
  (define (minScoreIter moeglichkeiten guess scores minimum)
    (if (empty? scores)
      minimum
      (if (or (empty? minimum) (< (zaehleWegfallende moeglichkeiten guess (car scores)) minimum))
        (minScoreIter moeglichkeiten guess (cdr scores) (zaehleWegfallende moeglichkeiten guess (car scores)))
        (minScoreIter moeglichkeiten guess (cdr scores) minimum)
        )
      )
    )
  (minScoreIter moeglichkeiten guess scores '())
  )
