#lang racket
(define (compress liste)
  (define (compress-iter liste vorher anzahl)
    (if (empty? liste)
        (if (= anzahl 1)
            (cons vorher '())
            (cons anzahl (cons vorher '()))
            )
        (if (equal? (car liste) vorher)
            (compress-iter (cdr liste) (car liste) (+ anzahl 1))
            (if (= anzahl 1)
                (cons vorher (compress-iter (cdr liste) (car liste) 1))
                (cons anzahl (cons vorher (compress-iter (cdr liste) (car liste) 1)))
                )
            )
        )
    )
  (if (empty? liste)
      '()
      (compress-iter (cdr liste) (car liste) 1))
  )